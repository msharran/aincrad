#!/usr/bin/env bash

# Don't have same projects in both HOST and GUEST.
# Currently there is no way to find that, but it also
# forces me to not edit and leave one uncommitted.

grepprg=rg
if !command -v "$grepprg" &>/dev/null; then
    echo "Cannot find 'rg', fallback to grep" >&2
    grepprg=grep
fi

list_projects() {
    echo "$HOME/aincrad"
    echo "$HOME/.ssh"
    echo "$HOME/.aws"
    # fd . $HOME/projects/work $HOME/projects/play -d 1 -t d
}

list_remote_projects() {
    local vm_home=$(ssh vm 'echo $HOME')
    ssh vm "fd . $vm_home/projects/work $vm_home/projects/play -d 1 -t d; \
        fd . $vm_home/projects/play/labs $vm_home/projects/play/codingchallenges.fyi -d 2 -t d"
    echo "$vm_home/.ssh"
    echo "$vm_home/.aws"
    echo "$vm_home/.ssh_keys"
}

find_and_open_projects() {
    projects=$(list_projects)
    remote_projects=$(list_remote_projects)

    # Add a prefix to remote projects to distinguish them
    remote_projects_with_prefix=$(echo "$remote_projects" | sed 's/^/vm: /')

    # Combine both lists
    all_projects=$(echo -e "${projects}\n${remote_projects_with_prefix}")

    # Choose a project with fzf
    selected=$(echo "$all_projects" | fzf)

    if [ -z "$selected" ]; then
        echo "Empty selection, exiting loop"
        exit 1
    fi

    selected_basename=$(basename "$selected")
    aerospace_window_id=$(aerospace list-windows --all | $grepprg -w Zed | $grepprg -w "$selected_basename —" | head -n 1 | awk '{print $1}')
    # Example command output looks like
    # ❯ aerospace list-windows --all | rg -w Zed | rg -w aincrad
    # 5277 | Zed       | aincrad — e
    # 5302 | Zed       | .dotfiles-private — config

    # If Zed window already exists, focus it
    if [[ $? == 0 ]] && [[ -n "$aerospace_window_id" ]]; then
        # NOTE: This command is slow, aerospace doesn't provide a way to tell if
        # $aerospace_window_id is focused currently so that we can avoid
        # running this command every time
        aerospace focus --window-id $aerospace_window_id
    else
        # Check if it's a remote project
        if [[ $selected == vm:* ]]; then
            # Extract the actual path by removing the "vm: " prefix
            remote_path=${selected#vm: }
            # Use zed with ssh:// protocol
            zed "ssh://vm$remote_path"
        else
            # Local project
            zed "$selected"
        fi
    fi
}

# Run in loop to allow multiple project selections
while true; do
    find_and_open_projects
done
