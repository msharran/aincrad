---
- name: Bootstrap Ubuntu ARM VM for Development
  hosts: vm
  become: yes
  gather_facts: yes

  vars_prompt:
    - name: gpg_passphrase
      prompt: "Enter GPG passphrase"
      private: yes
  vars:
    user_name: msharran
    user_home: "/home/{{ user_name }}"
    opt_dir: "{{ user_home }}/opt"
    local_bin_dir: "{{ user_home }}/.local/bin"

  tasks:
    - name: Get Ubuntu version
      shell: lsb_release -rs
      register: ubuntu_version
      changed_when: false
      check_mode: no

    - name: Verify Ubuntu version is 22.04 or higher
      fail:
        msg: "This playbook requires Ubuntu 22.04 or higher. Current version: {{ ubuntu_version.stdout }}"
      when: ubuntu_version.stdout is version('22.04', '<')

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install snapd (required for snap packages)
      apt:
        name: snapd
        state: present

    - name: Install system dependencies
      apt:
        name:
          - wget
          - git
          - bat
          - fzf
          - zoxide
          - eza
          - ripgrep
          - make
          - curl
          - stow
          - fish
          - btop
          - libssl-dev
          - git-crypt
          - ninja-build
          - gettext
          - cmake
          - unzip
          - build-essential
          - gcc
          - g++
          - python3
          - python3-pip
          - python3-venv
          - direnv
        state: present

    - name: Create local bin directory
      file:
        path: "{{ local_bin_dir }}"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'
      become_user: "{{ user_name }}"

    - name: Create opt directory
      file:
        path: "{{ opt_dir }}"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'
      become_user: "{{ user_name }}"

    - name: Create npm-global directory
      file:
        path: "{{ user_home }}/.npm-global"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'
      become_user: "{{ user_name }}"

    - name: Create go directory
      file:
        path: "{{ user_home }}/go"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'
      become_user: "{{ user_name }}"

    - name: Create local go directory
      file:
        path: "{{ user_home }}/.local/go"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'
      become_user: "{{ user_name }}"

    - name: Create cargo directory
      file:
        path: "{{ user_home }}/.cargo"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'
      become_user: "{{ user_name }}"

    - name: Wait for snapd to be ready
      wait_for:
        path: /var/lib/snapd/state.json
        timeout: 60

    - name: Check installed snaps
      command: snap list {{ item }}
      register: snap_check
      loop:
        - nvim
        - go
        - node
        - ghostty
        - kubectl
      changed_when: false
      failed_when: false

    - name: Install snaps
      snap:
        name: "{{ item.item }}"
        classic: true
      loop: "{{ snap_check.results }}"
      when: item.rc != 0
      become: yes
      retries: 3
      delay: 10

    - name: Remove pyright snap (to avoid conflicts with Mason-managed pyright)
      snap:
        name: pyright
        state: absent
      become: yes
      failed_when: false

    - name: Install Rust via rustup
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
      become_user: "{{ user_name }}"
      args:
        creates: "{{ user_home }}/.cargo/bin/rustc"

    - name: Get system architecture
      shell: uname -m
      register: system_arch
      changed_when: false

    - name: Set Zig architecture variable
      set_fact:
        zig_arch: "{{ 'aarch64' if system_arch.stdout == 'aarch64' else 'x86_64' }}"

    - name: Set k9s architecture variable
      set_fact:
        k9s_arch: "{{ 'arm64' if system_arch.stdout == 'aarch64' else 'amd64' }}"

    - name: Install Zig
      shell: |
        ZIG_VERSION="0.13.0"
        wget -O /tmp/zig.tar.xz "https://ziglang.org/download/${ZIG_VERSION}/zig-linux-{{ zig_arch }}-${ZIG_VERSION}.tar.xz"
        tar -xf /tmp/zig.tar.xz -C {{ user_home }}/.local/
        mv {{ user_home }}/.local/zig-linux-{{ zig_arch }}-${ZIG_VERSION} {{ user_home }}/.local/zig
        ln -sf {{ user_home }}/.local/zig/zig {{ local_bin_dir }}/zig
        rm -f /tmp/zig.tar.xz
      become_user: "{{ user_name }}"
      args:
        creates: "{{ local_bin_dir }}/zig"

    - name: Install Jujutsu VCS via Cargo
      shell: |
        source {{ user_home }}/.cargo/env
        {{ user_home }}/.cargo/bin/cargo install --locked --bin jj jj-cli
      become_user: "{{ user_name }}"
      args:
        creates: "{{ user_home }}/.cargo/bin/jj"
      environment:
        PATH: "{{ user_home }}/.cargo/bin:{{ ansible_env.PATH }}"

    - name: Install k9s
      shell: |
        wget https://github.com/derailed/k9s/releases/latest/download/k9s_linux_{{ k9s_arch }}.deb
        apt install ./k9s_linux_{{ k9s_arch }}.deb
        rm k9s_linux_{{ k9s_arch }}.deb
      args:
        creates: "/usr/bin/k9s"

    - name: Install pyenv
      shell: |
        curl https://pyenv.run | bash
      become_user: "{{ user_name }}"
      args:
        creates: "{{ user_home }}/.pyenv/bin/pyenv"

    - name: Wait for npm to be available
      wait_for:
        path: /snap/bin/npm
        timeout: 60

    - name: Check npm global prefix
      shell: /snap/bin/npm config get prefix
      register: npm_prefix
      become_user: "{{ user_name }}"
      changed_when: false
      failed_when: false
      retries: 3
      delay: 5

    - name: Set npm global prefix
      shell: |
        /snap/bin/npm config set prefix '{{ user_home }}/.npm-global'
      become_user: "{{ user_name }}"
      when: npm_prefix.stdout != user_home + '/.npm-global'

    - name: Install global npm packages
      shell: |
        /snap/bin/npm install -g @google/gemini-cli @anthropic-ai/claude-code
      become_user: "{{ user_name }}"
      args:
        creates: "{{ user_home }}/.npm-global/bin/gemini"

    - name: Check if Starship is already installed
      stat:
        path: "{{ local_bin_dir }}/starship"
      register: starship_installed

    - name: Download and install Starship
      shell: |
        curl -sS https://starship.rs/install.sh | BIN_DIR={{ local_bin_dir }} sh -s -- --yes
      become_user: "{{ user_name }}"
      when: not starship_installed.stat.exists

    - name: Set Fish as default shell
      user:
        name: "{{ user_name }}"
        shell: /usr/bin/fish
      become: yes

    - name: Create projects directory structure
      file:
        path: "{{ user_home }}/projects/{{ item }}"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: '0755'
      loop:
        - work
        - play
      become_user: "{{ user_name }}"

    

    - name: Check if aincrad repository exists
      stat:
        path: "{{ user_home }}/aincrad"
      register: aincrad_repo_status
      become_user: "{{ user_name }}"
      tags: dotfiles

    - name: Pull aincrad repository if it exists
      git:
        repo: https://github.com/msharran/aincrad
        dest: "{{ user_home }}/aincrad"
        update: yes
      when: aincrad_repo_status.stat.exists
      become_user: "{{ user_name }}"
      tags: dotfiles

    - name: Clone aincrad repository if it does not exist
      git:
        repo: https://github.com/msharran/aincrad
        dest: "{{ user_home }}/aincrad"
      when: not aincrad_repo_status.stat.exists
      become_user: "{{ user_name }}"
      tags: dotfiles

    - name: Install aincrad dotfiles
      shell: |
        echo "{{ gpg_passphrase }}" | git crypt unlock
        stow -v .
        chmod 400 .ssh/id*
      args:
        chdir: "{{ user_home }}/aincrad"
      become_user: "{{ user_name }}"
      tags: dotfiles

    - name: Verify installations
      shell: |
        echo "=== Neovim ==="
        /snap/bin/nvim --version | head -1
        echo "=== Node.js ==="
        /snap/bin/node --version
        echo "=== Go ==="
        /snap/bin/go version
        echo "=== Rust ==="
        {{ user_home }}/.cargo/bin/rustc --version
        echo "=== Zig ==="
        {{ local_bin_dir }}/zig version
        echo "=== Python (pyenv) ==="
        {{ user_home }}/.pyenv/bin/pyenv --version
        echo "=== GCC ==="
        gcc --version | head -1
        echo "=== direnv ==="
        direnv --version
        echo "=== Jujutsu (jj) ==="
        {{ user_home }}/.cargo/bin/jj --version
        echo "=== kubectl ==="
        /snap/bin/kubectl version --client
        echo "=== k9s ==="
        k9s version
      become_user: "{{ user_name }}"
      register: tool_versions
      changed_when: false

    - name: Display tool versions
      debug:
        msg: "{{ tool_versions.stdout_lines }}"
